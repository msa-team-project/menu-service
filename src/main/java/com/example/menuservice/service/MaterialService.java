package com.example.menuservice.service;

import com.example.menuservice.domain.Material;
import com.example.menuservice.dto.MaterialRequestDTO;
import com.example.menuservice.dto.MaterialResponseDTO;
import com.example.menuservice.exception.MaterialAlreadyExistsException;
import com.example.menuservice.exception.MaterialNotFoundException;
import com.example.menuservice.repository.MaterialRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class MaterialService {
    private final MaterialRepository materialRepository;
    private final FileUploadService fileUploadService;

    // Ïû¨Î£å Î™©Î°ù Ï°∞Ìöå
    public List<MaterialResponseDTO> viewMaterialList() {
        return materialRepository.findAll().stream()
                .map(this::toResponseDTO)
                .collect(Collectors.toList());
    }

    // Ïû¨Î£å Ïù¥Î¶ÑÏúºÎ°ú Ï°∞Ìöå
    public MaterialResponseDTO viewMaterial(String materialName) {
        Material material = materialRepository.findByMaterialName(materialName)
                .orElseThrow(() -> new MaterialNotFoundException(materialName));
        return toResponseDTO(material);
    }

    // Ïû¨Î£å Ï∂îÍ∞Ä
    @Transactional
    public MaterialResponseDTO addMaterial(MaterialRequestDTO requestDTO, MultipartFile file) throws IOException {
        String fileUrl = null;

        try {
            // ‚úÖ 1. Ï§ëÎ≥µ Ï≤¥ÌÅ¨
            if (materialRepository.existsByMaterialName(requestDTO.getMaterialName())) {
                throw new MaterialAlreadyExistsException(requestDTO.getMaterialName());
            }

            // ‚úÖ 2. S3Ïóê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (DB Ï†ÄÏû• Ï†ÑÏóê ÏàòÌñâ)
            if (file != null && !file.isEmpty()) {
                fileUrl = fileUploadService.uploadFile(file);
            }

            // ‚úÖ 3. Ïû¨Î£å Ï†ïÎ≥¥ Ï†ÄÏû•
            Material material = Material.builder()
                    .materialName(requestDTO.getMaterialName())
                    .calorie(requestDTO.getCalorie())
                    .price(requestDTO.getPrice())
                    .img(fileUrl)
                    .status("active")
                    .build();

            return toResponseDTO(materialRepository.save(material));

        } catch (Exception e) {
            // üö® Ìä∏ÎûúÏû≠ÏÖò Î°§Î∞± Ï†ÑÏóê ÏóÖÎ°úÎìúÎêú Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            if (fileUrl != null) {
                try {
                    fileUploadService.deleteFile(fileUrl);
                    System.out.println("üö® Ï†ÄÏû• Ïã§Ìå®Î°ú Ïù∏Ìï¥ S3 ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: " + fileUrl);
                } catch (Exception s3Exception) {
                    System.out.println("‚ö† S3 ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: " + fileUrl);
                }
            }

            throw e; // ÏòàÏô∏ Îã§Ïãú ÎçòÏ†∏ÏÑú Ìä∏ÎûúÏû≠ÏÖò Î°§Î∞±
        }
    }

    // Ïû¨Î£å ÏÇ≠Ï†ú (ÏÉÅÌÉúÎ•º "DELETED"Î°ú Î≥ÄÍ≤Ω)
    @Transactional
    public void removeMaterial(String materialName) {
        Material material = materialRepository.findByMaterialName(materialName)
                .orElseThrow(() -> new MaterialNotFoundException(materialName));

        // ‚úÖ ÏÉÅÌÉúÎ•º "DELETED"Î°ú Î≥ÄÍ≤Ω
        material.setStatus("DELETED");

        // ‚úÖ Î≥ÄÍ≤ΩÎêú ÏÉÅÌÉú Ï†ÄÏû•
        materialRepository.save(material);
    }

    // Ïû¨Î£å ÏàòÏ†ï
    @Transactional
    public MaterialResponseDTO editMaterialDetails(String materialName, MaterialRequestDTO requestDTO, MultipartFile file) throws IOException {
        Material material = materialRepository.findByMaterialName(materialName)
                .orElseThrow(() -> new MaterialNotFoundException(materialName));

        String fileUrl = material.getImg();

        try {
            // ‚úÖ ÏÉà Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïãú Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            if (file != null && !file.isEmpty()) {
                if (fileUrl != null) {
                    fileUploadService.deleteFile(fileUrl);
                }
                fileUrl = fileUploadService.uploadFile(file);
            }

            // ‚úÖ Î≥ÄÍ≤Ω Í∞êÏßÄÎ°ú ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
            material.updateMaterial(
                    requestDTO.getMaterialName(),
                    requestDTO.getCalorie(),
                    requestDTO.getPrice(),
                    fileUrl // ÏÉà Ïù¥ÎØ∏ÏßÄ URL Î∞òÏòÅ
            );

            return toResponseDTO(material);
        } catch (Exception e) {
            // üö® Ìä∏ÎûúÏû≠ÏÖò Î°§Î∞± Ï†ÑÏóê ÏóÖÎ°úÎìúÎêú ÏÉà Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            if (fileUrl != null) {
                try {
                    fileUploadService.deleteFile(fileUrl);
                } catch (Exception s3Exception) {
                    System.out.println("‚ö† S3 ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: " + fileUrl);
                }
            }
            throw e;
        }
    }

    // Ïû¨Î£å ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    @Transactional
    public void updateMainMaterialStatus(Long uid, String status) {
        Material material = materialRepository.findById(uid)
                .orElseThrow(() -> new MaterialNotFoundException("ID: " + uid));
        material.setStatus(status);
    }

    // Material -> MaterialResponseDTO Î≥ÄÌôò Î©îÏÑúÎìú
    private MaterialResponseDTO toResponseDTO(Material material) {
        return new MaterialResponseDTO(
                material.getUid(),
                material.getMaterialName(),
                material.getCalorie(),
                material.getPrice(),
                material.getImg(),
                material.getStatus(),
                material.getCreatedDate(),
                material.getVersion()
        );
    }
}
