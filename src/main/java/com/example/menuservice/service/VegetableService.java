package com.example.menuservice.service;

import com.example.menuservice.domain.Vegetable;
import com.example.menuservice.dto.VegetableRequestDTO;
import com.example.menuservice.dto.VegetableResponseDTO;
import com.example.menuservice.exception.VegetableAlreadyExistsException;
import com.example.menuservice.exception.VegetableNotFoundException;
import com.example.menuservice.repository.VegetableRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class VegetableService {
    private final VegetableRepository vegetableRepository;
    private final FileUploadService fileUploadService;

    // Ï±ÑÏÜå Î™©Î°ù Ï°∞Ìöå
    public List<VegetableResponseDTO> viewVegetableList() {
        return vegetableRepository.findAll().stream()
                .map(this::toResponseDTO)
                .collect(Collectors.toList());
    }

    // Ï±ÑÏÜå Ïù¥Î¶ÑÏúºÎ°ú Ï°∞Ìöå
    public VegetableResponseDTO viewVegetable(String vegetableName) {
        Vegetable vegetable = vegetableRepository.findByVegetableName(vegetableName)
                .orElseThrow(() -> new VegetableNotFoundException(vegetableName));
        return toResponseDTO(vegetable);
    }

    // Ï±ÑÏÜå Ï∂îÍ∞Ä
    @Transactional
    public VegetableResponseDTO addVegetable(VegetableRequestDTO requestDTO, MultipartFile file) throws IOException {
        String fileUrl = null;

        try {
            // ‚úÖ 1. Ï§ëÎ≥µ Ï≤¥ÌÅ¨
            if (vegetableRepository.existsByVegetableName(requestDTO.getVegetableName())) {
                throw new VegetableAlreadyExistsException(requestDTO.getVegetableName());
            }

            // ‚úÖ 2. S3Ïóê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (DB Ï†ÄÏû• Ï†ÑÏóê ÏàòÌñâ)
            if (file != null && !file.isEmpty()) {
                fileUrl = fileUploadService.uploadFile(file);
            }

            // ‚úÖ 3. Ï±ÑÏÜå Ï†ïÎ≥¥ Ï†ÄÏû•
            Vegetable vegetable = Vegetable.builder()
                    .vegetableName(requestDTO.getVegetableName())
                    .calorie(requestDTO.getCalorie())
                    .price(requestDTO.getPrice())
                    .img(fileUrl)
                    .status("active")
                    .build();

            return toResponseDTO(vegetableRepository.save(vegetable));

        } catch (Exception e) {
            // üö® Ìä∏ÎûúÏû≠ÏÖò Î°§Î∞± Ï†ÑÏóê ÏóÖÎ°úÎìúÎêú Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            if (fileUrl != null) {
                try {
                    fileUploadService.deleteFile(fileUrl);
                } catch (Exception s3Exception) {
                    System.out.println("‚ö† S3 ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: " + fileUrl);
                }
            }

            throw e; // ÏòàÏô∏ Îã§Ïãú ÎçòÏ†∏ÏÑú Ìä∏ÎûúÏû≠ÏÖò Î°§Î∞±
        }
    }

    // Ï±ÑÏÜå ÏÇ≠Ï†ú (ÏÉÅÌÉúÎ•º "DELETED"Î°ú Î≥ÄÍ≤Ω)
    @Transactional
    public void removeVegetable(String vegetableName) {
        Vegetable vegetable = vegetableRepository.findByVegetableName(vegetableName)
                .orElseThrow(() -> new VegetableNotFoundException(vegetableName));

        // ‚úÖ ÏÉÅÌÉúÎ•º "DELETED"Î°ú Î≥ÄÍ≤Ω
        vegetable.setStatus("DELETED");

        // ‚úÖ Î≥ÄÍ≤ΩÎêú ÏÉÅÌÉú Ï†ÄÏû•
        vegetableRepository.save(vegetable);
    }

    // Ï±ÑÏÜå ÏàòÏ†ï
    @Transactional
    public VegetableResponseDTO editVegetableDetails(String vegetableName, VegetableRequestDTO requestDTO, MultipartFile file) throws IOException {
        Vegetable vegetable = vegetableRepository.findByVegetableName(vegetableName)
                .orElseThrow(() -> new VegetableNotFoundException(vegetableName));

        String fileUrl = vegetable.getImg();

        try {
            // ‚úÖ ÏÉà Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïãú Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            if (file != null && !file.isEmpty()) {
                if (fileUrl != null) {
                    fileUploadService.deleteFile(fileUrl);
                }
                fileUrl = fileUploadService.uploadFile(file);
            }

            // ‚úÖ Î≥ÄÍ≤Ω Í∞êÏßÄÎ°ú ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
            vegetable.updateVegetable(
                    requestDTO.getVegetableName(),
                    requestDTO.getCalorie(),
                    requestDTO.getPrice(),
                    fileUrl // ÏÉà Ïù¥ÎØ∏ÏßÄ URL Î∞òÏòÅ
            );

            return toResponseDTO(vegetable);
        } catch (Exception e) {
            // üö® Ìä∏ÎûúÏû≠ÏÖò Î°§Î∞± Ï†ÑÏóê ÏóÖÎ°úÎìúÎêú ÏÉà Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            if (fileUrl != null) {
                try {
                    fileUploadService.deleteFile(fileUrl);
                } catch (Exception s3Exception) {
                    System.out.println("‚ö† S3 ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: " + fileUrl);
                }
            }
            throw e;
        }
    }

    // Ï±ÑÏÜå ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    @Transactional
    public void updateVegetableStatus(Long uid, String status) {
        Vegetable vegetable = vegetableRepository.findById(uid)
                .orElseThrow(() -> new VegetableNotFoundException("ID: " + uid));
        vegetable.setStatus(status);
    }

    // Vegetable -> VegetableResponseDTO Î≥ÄÌôò Î©îÏÑúÎìú
    private VegetableResponseDTO toResponseDTO(Vegetable vegetable) {
        return new VegetableResponseDTO(
                vegetable.getUid(),
                vegetable.getVegetableName(),
                vegetable.getCalorie(),
                vegetable.getPrice(),
                vegetable.getImg(),
                vegetable.getStatus(),
                vegetable.getCreatedDate(),
                vegetable.getVersion()
        );
    }
}
